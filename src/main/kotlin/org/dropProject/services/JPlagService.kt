/*-
 * ========================LICENSE_START=================================
 * DropProject
 * %%
 * Copyright (C) 2019 - 2022 Pedro Alves
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.dropProject.services

import de.jplag.JPlag
import de.jplag.options.JPlagOptions
import de.jplag.options.LanguageOption
import de.jplag.reporting.Report
import org.apache.commons.io.FileUtils
import org.dropProject.Constants
import org.dropProject.dao.Submission
import org.dropProject.repository.SubmissionRepository
import org.springframework.stereotype.Service
import java.io.File
import kotlin.math.round

/**
 * Representation of a plagiarism checking result, regardless of the engine used
 * (i.e., not tied to JPlag for example)
 */
data class PlagiarismComparison(
    val matchId: Int,  // sequential id that will be used to show the details of the comparison
    val firstSubmission: Submission,
    val secondSubmission: Submission,
    val similarityPercentage: Int,
    var firstNumTries: Int = -1, // how many submissions did the first group
    var secondNumTries: Int = -1
)

@Service
class JPlagService(private val submissionService: SubmissionService,
                   private val submissionRepository: SubmissionRepository) {

    var reportFoldersByAssignmentId = mutableMapOf<String,File>()

    /**
     * Copies to baseFolder all the submissions that will be checked for plagiarism, in the
     * appropriate folder structure for this tool
     */
    fun prepareSubmissions(submissions: List<Submission>, baseFolder: File) {
        for (submission in submissions) {
            val originalProjectFolder = submissionService.getOriginalProjectFolder(submission)
            FileUtils.copyDirectoryToDirectory(File(originalProjectFolder, "src"), File(baseFolder, "${submission.id}"))
        }
    }

    /**
     * Runs JPlag over the submissions in baseFolder (previously prepared, see prepareSubmissions) and
     * returns the result as a list of [PlagiarismComparison].
     * Also, it produces an HTML report into the outputReportFolder. This will be needed to show individual
     * reports for each match (showing the code side by side)
     * Finally, it associates the assignmentId with the outputReportFolder in a local variable for future reference
     */
    fun checkSubmissions(baseFolder: File, assignmentId: String, outputReportFolder: File): List<PlagiarismComparison> {

        val options = JPlagOptions(baseFolder.absolutePath, LanguageOption.JAVA)
        options.similarityThreshold = Constants.SIMILARITY_THRESHOLD.toFloat()  // ignore comparisons below this similarity
        val jplag = JPlag(options)
        val result = jplag.run()

        val jplagComparisons = result.comparisons

        val report = Report(outputReportFolder, options)
        report.writeResult(result)
        reportFoldersByAssignmentId[assignmentId] = outputReportFolder

        val comparisons = jplagComparisons.mapIndexed { idx, jplagComparison ->
            PlagiarismComparison(idx,
                submissionRepository.getById(jplagComparison.firstSubmission.name.toLong()),
                submissionRepository.getById(jplagComparison.secondSubmission.name.toLong()),
                round(jplagComparison.similarity()).toInt())
        }

        return comparisons
    }

    fun getComparisonReportHtml(assignmentId: String, matchId: Int) : String {
        val matchReportFile = File(reportFoldersByAssignmentId[assignmentId], "match${matchId}.html")
        val matchReportContent = matchReportFile.readText()
        return matchReportContent.replace("<body>", "<body><div style='background: red;color: white;'>Disclaimer: " +
                "This is a report generated by JPlag, outside Drop Project control. " +
                "Right now, the JPlag API doesn't allow getting this information programatically.</div>")
    }
}
